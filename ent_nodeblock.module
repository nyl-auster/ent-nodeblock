<?php

/**
 * Implements hook_menu
 */
function ent_nodeblock_menu() {
  return array(
    'admin/structure/ent-nodeblock' => array(
      'title' => 'Ent nodeblock',
      'description' => 'Automatically generate blocks from nodes of selected content types',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ent_nodeblock_config_form'),
      'file' => 'ent_nodeblock.admin.inc',
      'access arguments' => array('administer site configuration'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function ent_nodeblock_theme() {
  return array(
    'ent_nodeblock' => array(
      'variables' => array('node' => NULL, 'view_mode' => 'full'),
    ),
  );
}

/**
 * Implements hook_block_info()
 * Dynamically create blocks from the nodes.
 */
function ent_nodeblock_block_info() {
  $blocks = array();
  foreach (ent_nodeblock_get_all() as $nid) {
    $node = node_load($nid);
    $delta = ent_nodeblock_create_delta($nid);
    $blocks[$delta] = array('info' => t("Ent nodeblock : $node->title"));
    drupal_alter('ent_nodeblock_info', $blocks[$delta], $node);
  }
  return $blocks;
}

/**
 * Implements hook_block_view();
 * Define what a block defined in hook_block_info has to display
 */
function ent_nodeblock_block_view($delta) {
  if (strpos($delta, 'ent_nodeblock') !== 0) return;
  $node = node_load(ent_nodeblock_get_nid_from_delta($delta));
  $block = array(
    'subject' => $node->title,
    'content' => array(
      '#theme' => 'ent_nodeblock',
      '#node' => $node,
      '#view_mode' => 'full',
    ),
  );
  drupal_alter('ent_nodeblock_view', $block, $node);
  return $block;
}

/**
 * Implements hook_node_delete()
 * When deleting a node, also delete its associated block
 */
function ent_nodeblock_node_delete($node) {
  ent_nodeblock_delete_block(ent_nodeblock_create_delta($node->nid));
}

/**
 * Get nid from delta string (e.g : for ent_nodeblock-17, this function return 17)
 * @param string $delta
 * @return int
 */
function ent_nodeblock_get_nid_from_delta($delta) {
  $parts = explode('-', $delta);
  return array_pop($parts);
}

/**
 * Create a machine name for the block
 * @param $nid : nid of the node
 * @return string : delta usable for a block
 */
function ent_nodeblock_create_delta($nid) {
  return "ent_nodeblock-$nid";
}

/**
 * Get all nodes nids we have to convert tob blokcs
 * @return array of nids
 */
function ent_nodeblock_get_all() {
  $content_types = ent_nodeblock_get_conf_content_types(TRUE);
  return ent_nodeblock_get_nodes(array_keys($content_types));
}

/**
 * Get content types configuration, set in admin/structure/ent-nodeblock
 * @param bool $enabled_only return only enabled content_types conf
 * @return array keyed by content type machine name
 */
function ent_nodeblock_get_conf_content_types($enabled_only = TRUE) {
  $config = variable_get('ent_nodeblock', array());
  $content_types = isset($config['content_types']) ? $config['content_types'] : array();
  if ($enabled_only) {
    foreach ($content_types as $type => $datas) {
      if (!$datas['enabled']) unset($content_types[$type]);
    }
  }
  return $content_types;
}

/**
 * Get nids of nodes to concert to blocks
 * @param array $content_types : filter by content types
 * @return array
 */
function ent_nodeblock_get_nodes($content_types = array()) {
  if (!$content_types) return array();
  $query = db_select('node', 'n');
  $query->condition('type', $content_types, 'IN');
  $query->addField('n', 'nid');
  $query->addTag('node_access');
  $nids = $query->execute()->fetchCol();
  return $nids;
}

/**
 * Delete a block according to its delta.
 * @param string $delta
 */
function ent_nodeblock_delete_block($delta) {
  foreach (array('block', 'block_role', 'block_node_type') as $table) {
    db_delete($table)->condition('delta', $delta)->execute();
  }
}

function theme_ent_nodeblock($variables) {
  $node = node_view($variables['node'], $variables['view_mode']);
  return drupal_render($node);
}

/**
 * Implements hook_preprocess_node
 * @param $variables
 */
function ent_nodeblock_preprocess_node(&$variables) {
  $node = $variables['node'];
  $conf = ent_nodeblock_get_conf_content_types();
  // workaround to hide node title if asked
  if (!empty($conf[$node->type]['hide_node_title'])) {
    $variables['page'] = TRUE;
  }
}








